{"ast":null,"code":"var _jsxFileName = \"/Users/anthonywu/WebstormProjects/Expense-Tracker/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport Reducer from './Reducer'; // Initial state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  transactions: []\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Provider component to allow the components to receive the current state and actions\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/anthonywu/WebstormProjects/Expense-Tracker/src/context/GlobalState.js"],"names":["React","createContext","useReducer","Reducer","initialState","transactions","GlobalContext","GlobalProvider","children","state","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE;AADG,CAArB,C,CAIA;;AACA,OAAO,MAAMC,aAAa,gBAAGL,aAAa,CAACG,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMG,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,UAAU,CAACC,OAAD,EAAUC,YAAV,CAApC;AACA,sBACI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EACzB;AACIC,MAAAA,YAAY,EAAEI,KAAK,CAACJ;AADxB,KADJ;AAAA,cAKKG;AALL;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAXM;;GAAMD,c;;KAAAA,c","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport Reducer from './Reducer';\n\n// Initial state\nconst initialState = {\n    transactions: []\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component to allow the components to receive the current state and actions\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(Reducer, initialState);\n    return (\n        <GlobalContext.Provider value = {\n            {\n                transactions: state.transactions\n            }\n        }>\n            {children}\n        </GlobalContext.Provider>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}