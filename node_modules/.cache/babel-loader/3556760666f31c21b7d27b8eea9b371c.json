{"ast":null,"code":"var _jsxFileName = \"/Users/anthonywu/WebstormProjects/Expense-Tracker/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from 'react';\nimport Reducer from './Reducer';\nimport axios from 'axios'; // Initial state\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  transactions: [] // initially, an empty transaction List\n\n}; // Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); // Provider component to allow the components to receive the current state and actions\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(Reducer, initialState); // dispatch calls the Reducer\n\n  async function getTransaction() {\n    try {\n      const res = await axios.get('/api/v1/transactions');\n      dispatch({\n        type: \"get_transactions\",\n        payload: res.data.data\n      });\n    } catch (err) {\n      dispatch({\n        type: \"error_request\"\n      });\n    }\n  } // dispatch action\n\n\n  const deleteTransaction = id => {\n    // the object is the action\n    dispatch({\n      type: \"delete_transaction\",\n      payload: id\n    });\n  };\n\n  const addTransaction = transaction => {\n    dispatch({\n      type: \"add_transaction\",\n      payload: transaction\n    });\n  }; // provide the state or the functions accessible to all of the components\n\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      deleteTransaction,\n      addTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GlobalProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/Users/anthonywu/WebstormProjects/Expense-Tracker/src/context/GlobalState.js"],"names":["React","createContext","useReducer","Reducer","axios","initialState","transactions","GlobalContext","GlobalProvider","children","state","dispatch","getTransaction","res","get","type","payload","data","err","deleteTransaction","id","addTransaction","transaction"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,OAAjD;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE,EADG,CACA;;AADA,CAArB,C,CAIA;;AACA,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAACI,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAMG,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAC5C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,UAAU,CAACC,OAAD,EAAUE,YAAV,CAApC,CAD4C,CACiB;;AAE7D,iBAAeO,cAAf,GAAgC;AAC5B,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,sBAAV,CAAlB;AACAH,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAE,kBADD;AAELC,QAAAA,OAAO,EAAEH,GAAG,CAACI,IAAJ,CAASA;AAFb,OAAD,CAAR;AAIH,KAND,CAME,OAAOC,GAAP,EAAY;AACVP,MAAAA,QAAQ,CAAC;AACLI,QAAAA,IAAI,EAAE;AADD,OAAD,CAAR;AAIH;AACJ,GAhB2C,CAkB5C;;;AACA,QAAMI,iBAAiB,GAAIC,EAAD,IAAQ;AAC9B;AACAT,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAE,oBADD;AAELC,MAAAA,OAAO,EAAEI;AAFJ,KAAD,CAAR;AAIH,GAND;;AAQA,QAAMC,cAAc,GAAIC,WAAD,IAAiB;AACpCX,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAE,iBADD;AAELC,MAAAA,OAAO,EAAEM;AAFJ,KAAD,CAAR;AAIH,GALD,CA3B4C,CAkC5C;;;AACA,sBACI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EACzB;AACIhB,MAAAA,YAAY,EAAEI,KAAK,CAACJ,YADxB;AAEIa,MAAAA,iBAFJ;AAGIE,MAAAA;AAHJ,KADJ;AAAA,cAOKZ;AAPL;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA9CM;;GAAMD,c;;KAAAA,c","sourcesContent":["import React, { createContext, useReducer } from 'react';\nimport Reducer from './Reducer';\nimport axios from 'axios';\n\n// Initial state\nconst initialState = {\n    transactions: [] // initially, an empty transaction List\n}\n\n// Create context\nexport const GlobalContext = createContext(initialState);\n\n// Provider component to allow the components to receive the current state and actions\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(Reducer, initialState); // dispatch calls the Reducer\n\n    async function getTransaction() {\n        try {\n            const res = await axios.get('/api/v1/transactions');\n            dispatch({\n                type: \"get_transactions\",\n                payload: res.data.data,\n            });\n        } catch (err) {\n            dispatch({\n                type: \"error_request\",\n                \n            })\n        }\n    }\n\n    // dispatch action\n    const deleteTransaction = (id) => {\n        // the object is the action\n        dispatch({\n            type: \"delete_transaction\",\n            payload: id\n        });\n    }\n\n    const addTransaction = (transaction) => {\n        dispatch({\n            type: \"add_transaction\",\n            payload: transaction\n        });\n    }\n\n    // provide the state or the functions accessible to all of the components\n    return (\n        <GlobalContext.Provider value = {\n            {\n                transactions: state.transactions,\n                deleteTransaction,\n                addTransaction\n            }\n        }>\n            {children}\n        </GlobalContext.Provider>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}